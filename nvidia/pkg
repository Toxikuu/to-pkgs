#!/to
# Huge thanks to Zeckma for her work on:
# https://github.com/glfs-book/glfs/blob/trunk/shareddeps/drivers/nvidia.xml

n="nvidia"
v="575.64"
a="${n^^} drivers"
m="Tox"
l="Custom"
t="lib utils cli gfx drivers"
u="https://github.com/${n^^}/open-gpu-kernel-modules.git"
vf="curl -s https://api.github.com/repos/${n^^}/open-gpu-kernel-modules/releases/latest | grep tag_name | cut -d'\"' -f4"

s=(
    "https://us.download.$n.com/XFree86/Linux-x86_64/$v/${n^^}-Linux-x86_64-$v.run"
)

d=(
    "mesa"
    "libglvnd"
    "kernel"
    "b,libelf"
)

qa=(
    "brokensymlinks"
)

nvsym() {
    pushd "$(dirname $1)" > /dev/null

    origin="$(basename $1)"
    if [ "$origin" = "libOpenCL" ]; then
        VER="1.0.0"
    else
        VER="$v"
    fi

    soname=$(objdump -p "$origin.so.$VER" |
        grep 'SONAME' | awk '{print $2}')

    if [ -n "$soname" ]; then
        if [ "$origin.so.$VER" != "$soname" ]; then
            ln -sfv "$origin.so.$VER" "$soname"
        fi
        ln -sfv "$soname" "$origin.so"
    fi

    popd > /dev/null
}

xt() {

sh "$S/${n^^}-Linux-x86_64-$v.run" -x

}

b() {

# Setup
shopt -u nullglob
kver=$(</usr/src/linux/version)

# Build and install modules
pushd kernel-open

_cfg=(
    NV_VERBOSE=1
    KERNEL_UNAME="$kver"
    KERNEL_MODLIB="$D/usr/lib/modules/$kver" # TODO: NVIDIA's Makefile appears to ignore this ??
    KERNEL_SOURCES="/usr/src/linux"
    NV_EXCLUDE_KERNEL_MODULES="$n-peermem $n-uvm"
)
mk "${_cfg[@]}"
mk "${_cfg[@]}" modules_install
[ -e "$D/usr/lib/modules/$kver/kernel/drivers/video/$n.ko" ] ||
    install -vDm644 "/usr/lib/modules/$kver/kernel/drivers/video/$n"* \
        -t "$D/usr/lib/modules/$kver/kernel/drivers/video/"
[ -e "$D/usr/lib/modules/$kver/kernel/drivers/video/$n.ko" ] ||
    die "Kernel modules weren't installed where they belong"

popd

# Install firmware
install -vDm644 "firmware/gsp_tu10x.bin"        -t "$D/usr/lib/firmware/$n/$v/"

# Mandatory software
install -vdm755 "$D/usr/lib/gbm"
libs=(
  lib$n-cfg
  lib$n-eglcore
  lib$n-glcore
  lib$n-glsi
  lib$n-glvkspirv
  lib$n-gpucomp
  lib$n-ml
  lib$n-pkcs11
  lib$n-tls
  lib$n-allocator
)

for lib in ${libs[@]}; do
    install -vDm755 $lib.so* -t "$D/usr/lib"
    nvsym "$D/usr/lib/$lib" || die "Failed to install and symlink ${lib}"
done

install -vDm4755 "$n-modprobe"                  -t "$D/usr/bin/"
install -vDm644  "$n-application-profiles"*     -t "$D/usr/share/$n/"


# X11
install -vDm755 "${n}_drv.so"*                  -t "$D/usr/lib/xorg/modules/drivers/"
install -vDm755 "libglxserver_$n.so"*           -t "$D/usr/lib/xorg/modules/extensions/"

ln -sfv "libglxserver_$n.so.$v" \
    "$D/usr/lib/xorg/modules/extensions/libglxserver_$n.so.1"
ln -sfv "libglxserver_$n.so.1"  \
    "$D/usr/lib/xorg/modules/extensions/libglxserver_$n.so"

install -vDm755 "libGLX_$n.so"* "lib$n-fbc.so"* -t "$D/usr/lib/"

nvsym "$D/usr/lib/libGLX_$n"
nvsym "$D/usr/lib/lib$n-fbc"

install -vDm644 "$n-drm-outputclass.conf"       -t "$D/usr/share/X11/xorg.conf.d/"

# EGL
# TODO: EGL may require more stuff
libs=(
    lib$n-egl-gbm
    lib$n-egl-wayland
    lib$n-egl-xcb
    lib$n-egl-xlib
    libEGL_$n
    lib$n-wayland-client
)
for lib in ${libs[@]}; do
    install -vDm755 "$lib.so"*                  -t "$D/usr/lib"
    nvsym "$D/usr/lib/$lib" || die "Failed to install and symlink ${lib}"
done

install -vDm644 {10,15,20}*.json                -t "$D/usr/share/glvnd/egl_vendor.d/"

# GLES v{2,3}
install -vDm755 "libGLESv2_$n.so"*              -t "$D/usr/lib"
nvsym "$D/usr/lib/libGLESv2_$n"

# Vulkan
install -vDm644 "${n}_icd.json"                 -t "$D/usr/share/vulkan/icd.d/"

# VDPAU
install -vDm755 "libvdpau_$n.so"*               -t "$D/usr/lib/vdpau/"
nvsym "$D/usr/lib/vdpau/libvdpau_$n"

# CUDA
libs=(
    libcuda
    libcudadebugger
    lib$n-encode
    lib$n-opticalflow
    lib$n-ptxjitcompiler
    lib$n-nvvm
    libnvcuvid
)
for lib in ${libs[@]}; do
    install -vDm755 "$lib.so"*                  -t "$D/usr/lib/"
    nvsym "$D/usr/lib/$lib" || die "Failed to install and symlink ${lib}"
done

install -vDm755 "lib$n-api"*                    -t "$D/usr/lib/"
ln -svf "/usr/lib/lib$n-api.so.1" \
        "/usr/lib/lib$n-api.so"
install -vDm755 "lib$n-nvvm70"*                 -t "$D/usr/lib/"

# Utils
install -vDm755 "$n-xconfig"                    -t "$D/usr/bin/"
install -vDm755 "$n-smi"                        -t "$D/usr/bin/"

# Create a DRI pkgconfig file for packages expecting one
install -vDm644 /dev/stdin "$D/usr/lib/pkgconfig/dri.pc" << EOF
prefix=/usr
includedir=\${prefix}/include

dridriverdir=/usr/lib/dri

Name: dri
Description: Direct Rendering Infrastructure
Version: $v
Requires.private: libdrm >= 2.4.109
Cflags: -I\${includedir}
EOF

# Blacklist stuff necessary to have a functional tty
install -vDm644 /dev/stdin "$D/usr/lib/modprobe.d/nvfb.conf" << EOF
# /usr/lib/modprobe.d/nvfb.conf

blacklist ${n}fb
blacklist nouveau
EOF

# Blacklist stuff necessary to have a functional wayland
install -vDm644 /dev/stdin "$D/usr/lib/modprobe.d/${n}_drm.conf" << EOF
# /usr/lib/modprobe.d/${n}_drm.conf

options ${n}_drm modeset=1
EOF

}

i() {

ln -svrf "/usr/lib/lib$n-allocator.so"  \
         "/usr/lib/gbm/$n-drm_gbm.so"

if to data -i xorg-server; then
    $n-xconfig
fi

}
